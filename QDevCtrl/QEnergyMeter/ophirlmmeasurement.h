/****************************************************************************
**
** Namespace OphirLMMeasurementLib generated by dumpcpp v5.6.3 using
** dumpcpp.exe {B180613C-E514-4739-AADC-CAD4493910D7}
** from the type library C:\Program Files\Ophir Optronics\StarLab 3.30\Automation Examples\Com object\Redistributable\x86\OphirLMMeasurement.dll
**
****************************************************************************/

#ifndef QAX_DUMPCPP_OPHIRLMMEASUREMENTLIB_H
#define QAX_DUMPCPP_OPHIRLMMEASUREMENTLIB_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef OPHIRLMMEASUREMENTLIB_EXPORT
#define OPHIRLMMEASUREMENTLIB_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>
#include <windows.h>

struct IDispatch;


// Referenced namespace

namespace OphirLMMeasurementLib {


// skipping event interface _ICoLMMeasurementEvents

class OPHIRLMMEASUREMENTLIB_EXPORT ICoLMMeasurement : public QAxObject
{
public:
    ICoLMMeasurement(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {

        internalRelease();
    }

    /*
    Method AddWavelength

    method AddWavelength

    */
    inline void AddWavelength(int hDevice, int channel, int wavelength);

    /*
    Method Close

    method Close

    */
    inline void Close(int hDevice);

    /*
    Method CloseAll

    method CloseAll

    */
    inline void CloseAll();

    /*
    Method ConfigureStreamMode

    method ConfigureStreamMode

    */
    inline void ConfigureStreamMode(int hDevice, int channel, int mode, int nValue);

    /*
    Method DeleteWavelength

    method DeleteWavelength

    */
    inline void DeleteWavelength(int hDevice, int channel, int index);

    /*
    Method GetData

    method GetData

    */
    inline void GetData(int hDevice, int channel, QVariant& arrayValue, QVariant& arrayTimestamp, QVariant& arrayStatus);

    /*
    Method GetDeviceInfo

    method GetDeviceInfo

    */
    inline void GetDeviceInfo(int hDevice, QString& deviceName, QString& romVersion, QString& serialNumber);

    /*
    Method GetDiffuser

    method GetDiffuser

    */
    inline void GetDiffuser(int hDevice, int channel, int& index, QVariant& options);

    /*
    Method GetDriverVersion

    method GetDriverVersion

    */
    inline void GetDriverVersion(QString& info);

    /*
    Method GetErrorFromCode

    method GetErrorFromCode

    */
    inline void GetErrorFromCode(int errorCode, QString& errorString);

    /*
    Method GetExtTrigModes

    method GetExtTrigModes

    */
    inline void GetExtTrigModes(int hDevice, int& index, QVariant& options);

    /*
    Method GetExtTrigOnOff

    method GetExtTrigOnOff

    */
    inline void GetExtTrigOnOff(int hDevice, int channel, int& index, QVariant& options);

    /*
    Method GetExtTrigWindowTime

    method GetExtTrigWindowTime

    */
    inline void GetExtTrigWindowTime(int hDevice, int& extTrigWindow);

    /*
    Method GetFilter

    method GetFilter

    */
    inline void GetFilter(int hDevice, int channel, int& index, QVariant& options);

    /*
    Method GetKnownWirelessDevices

    method GetKnownWirelessDevices

    */
    inline void GetKnownWirelessDevices(QVariant& serialNumbers);

    /*
    Method GetMeasurementMode

    method GetMeasurementModes

    */
    inline void GetMeasurementMode(int hDevice, int channel, int& index, QVariant& options);

    /*
    Method GetPulseLengths

    method GetPulseLengths

    */
    inline void GetPulseLengths(int hDevice, int channel, int& index, QVariant& options);

    /*
    Method GetRanges

    method GetRanges

    */
    inline void GetRanges(int hDevice, int channel, int& index, QVariant& options);

    /*
    Method GetSensorInfo

    method GetSensorInfo

    */
    inline void GetSensorInfo(int hDevice, int channel, QString& serialNumber, QString& headType, QString& headName);

    /*
    Method GetThreshold

    method GetThreshold

    */
    inline void GetThreshold(int hDevice, int channel, int& index, QVariant& options);

    /*
    Method GetVersion

    method GetVersion

    */
    inline void GetVersion(int& version);

    /*
    Method GetWavelengths

    method GetWavelengths

    */
    inline void GetWavelengths(int hDevice, int channel, int& index, QVariant& options);

    /*
    Method GetWavelengthsExtra

    method GetWavelengthsExtra

    */
    inline void GetWavelengthsExtra(int hDevice, int channel, bool& modifiable, int& minWavelength, int& maxWavelength);

    /*
    Method IsSensorExists

    method IsSensorExists

    */
    inline void IsSensorExists(int hDevice, int channel, bool& exists);

    /*
    Method ModifyWavelength

    method ModifyWavelength

    */
    inline void ModifyWavelength(int hDevice, int channel, int index, int wavelength);

    /*
    Method OpenUSBDevice

    method OpenUSBDevice

    */
    inline void OpenUSBDevice(const QString& serialNumber, int& hDevice);

    /*
    Method OpenWirelessDevice

    method OpenWirelessDevice

    */
    inline void OpenWirelessDevice(const QString& serialNumber, int& hDevice);

    /*
    Method Read

    method Read

    */
    inline void Read(int hDevice, QString& reply);

    /*
    Method ResetAllDevices

    method ResetAllDevices

    */
    inline void ResetAllDevices();

    /*
    Method ResetDevice

    method ResetDevice

    */
    inline void ResetDevice(int hDevice);

    /*
    Method SaveSettings

    method SaveSettings

    */
    inline void SaveSettings(int hDevice, int channel);

    /*
    Method ScanUSB

    method ScanUSB

    */
    inline void ScanUSB(QVariant& serialNumbers);

    /*
    Method ScanWireless

    method ScanWireless

    */
    inline void ScanWireless(QVariant& serialNumbers);

    /*
    Method SetDiffuser

    method SetDiffuser

    */
    inline void SetDiffuser(int hDevice, int channel, int index);

    /*
    Method SetExtTrigMode

    method SetExtTrigMode

    */
    inline void SetExtTrigMode(int hDevice, int index);

    /*
    Method SetExtTrigOnOff

    method SetExtTrigOnOff

    */
    inline void SetExtTrigOnOff(int hDevice, int channel, int index);

    /*
    Method SetExtTrigWindowTime

    method SetExtTrigWindowTime

    */
    inline void SetExtTrigWindowTime(int hDevice, int extTrigWindowTime);

    /*
    Method SetFilter

    method SetFilter

    */
    inline void SetFilter(int hDevice, int channel, int index);

    /*
    Method SetMeasurementMode

    method SetMeasurementMode

    */
    inline void SetMeasurementMode(int hDevice, int channel, int index);

    /*
    Method SetPulseLength

    method SetPulseLength

    */
    inline void SetPulseLength(int hDevice, int channel, int index);

    /*
    Method SetRange

    method SetRange

    */
    inline void SetRange(int hDevice, int channel, int index);

    /*
    Method SetThreshold

    method SetThreshold

    */
    inline void SetThreshold(int hDevice, int channel, int index);

    /*
    Method SetWavelength

    method SetWavelength

    */
    inline void SetWavelength(int hDevice, int channel, int index);

    /*
    Method StartStream

    method StartStream

    */
    inline void StartStream(int hDevice, int channel);

    /*
    Method StopAllStreams

    method StopAllStreams

    */
    inline void StopAllStreams();

    /*
    Method StopStream

    method StopStream

    */
    inline void StopStream(int hDevice, int channel);

    /*
    Method Write

    method Write

    */
    inline void Write(int hDevice, const QString& command);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// Actual coclasses
class OPHIRLMMEASUREMENTLIB_EXPORT CoLMMeasurement : public QAxObject
{
public:
    CoLMMeasurement(QObject *parent = 0)
    : QAxObject(parent)
    {

    }

    CoLMMeasurement(ICoLMMeasurement *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method AddWavelength

    method AddWavelength

    */
    inline void AddWavelength(int hDevice, int channel, int wavelength);

    /*
    Method Close

    method Close

    */
    inline void Close(int hDevice);

    /*
    Method CloseAll

    method CloseAll

    */
    inline void CloseAll();

    /*
    Method ConfigureStreamMode

    method ConfigureStreamMode

    */
    inline void ConfigureStreamMode(int hDevice, int channel, int mode, int nValue);

    /*
    Method DeleteWavelength

    method DeleteWavelength

    */
    inline void DeleteWavelength(int hDevice, int channel, int index);

    /*
    Method GetData

    method GetData

    */
    inline void GetData(int hDevice, int channel, QVariant& arrayValue, QVariant& arrayTimestamp, QVariant& arrayStatus);

    /*
    Method GetDeviceInfo

    method GetDeviceInfo

    */
    inline void GetDeviceInfo(int hDevice, QString& deviceName, QString& romVersion, QString& serialNumber);

    /*
    Method GetDiffuser

    method GetDiffuser

    */
    inline void GetDiffuser(int hDevice, int channel, int& index, QVariant& options);

    /*
    Method GetDriverVersion

    method GetDriverVersion

    */
    inline void GetDriverVersion(QString& info);

    /*
    Method GetErrorFromCode

    method GetErrorFromCode

    */
    inline void GetErrorFromCode(int errorCode, QString& errorString);

    /*
    Method GetExtTrigModes

    method GetExtTrigModes

    */
    inline void GetExtTrigModes(int hDevice, int& index, QVariant& options);

    /*
    Method GetExtTrigOnOff

    method GetExtTrigOnOff

    */
    inline void GetExtTrigOnOff(int hDevice, int channel, int& index, QVariant& options);

    /*
    Method GetExtTrigWindowTime

    method GetExtTrigWindowTime

    */
    inline void GetExtTrigWindowTime(int hDevice, int& extTrigWindow);

    /*
    Method GetFilter

    method GetFilter

    */
    inline void GetFilter(int hDevice, int channel, int& index, QVariant& options);

    /*
    Method GetKnownWirelessDevices

    method GetKnownWirelessDevices

    */
    inline void GetKnownWirelessDevices(QVariant& serialNumbers);

    /*
    Method GetMeasurementMode

    method GetMeasurementModes

    */
    inline void GetMeasurementMode(int hDevice, int channel, int& index, QVariant& options);

    /*
    Method GetPulseLengths

    method GetPulseLengths

    */
    inline void GetPulseLengths(int hDevice, int channel, int& index, QVariant& options);

    /*
    Method GetRanges

    method GetRanges

    */
    inline void GetRanges(int hDevice, int channel, int& index, QVariant& options);

    /*
    Method GetSensorInfo

    method GetSensorInfo

    */
    inline void GetSensorInfo(int hDevice, int channel, QString& serialNumber, QString& headType, QString& headName);

    /*
    Method GetThreshold

    method GetThreshold

    */
    inline void GetThreshold(int hDevice, int channel, int& index, QVariant& options);

    /*
    Method GetVersion

    method GetVersion

    */
    inline void GetVersion(int& version);

    /*
    Method GetWavelengths

    method GetWavelengths

    */
    inline void GetWavelengths(int hDevice, int channel, int& index, QVariant& options);

    /*
    Method GetWavelengthsExtra

    method GetWavelengthsExtra

    */
    inline void GetWavelengthsExtra(int hDevice, int channel, bool& modifiable, int& minWavelength, int& maxWavelength);

    /*
    Method IsSensorExists

    method IsSensorExists

    */
    inline void IsSensorExists(int hDevice, int channel, bool& exists);

    /*
    Method ModifyWavelength

    method ModifyWavelength

    */
    inline void ModifyWavelength(int hDevice, int channel, int index, int wavelength);

    /*
    Method OpenUSBDevice

    method OpenUSBDevice

    */
    inline void OpenUSBDevice(const QString& serialNumber, int& hDevice);

    /*
    Method OpenWirelessDevice

    method OpenWirelessDevice

    */
    inline void OpenWirelessDevice(const QString& serialNumber, int& hDevice);

    /*
    Method Read

    method Read

    */
    inline void Read(int hDevice, QString& reply);

    /*
    Method ResetAllDevices

    method ResetAllDevices

    */
    inline void ResetAllDevices();

    /*
    Method ResetDevice

    method ResetDevice

    */
    inline void ResetDevice(int hDevice);

    /*
    Method SaveSettings

    method SaveSettings

    */
    inline void SaveSettings(int hDevice, int channel);

    /*
    Method ScanUSB

    method ScanUSB

    */
    inline void ScanUSB(QVariant& serialNumbers);

    /*
    Method ScanWireless

    method ScanWireless

    */
    inline void ScanWireless(QVariant& serialNumbers);

    /*
    Method SetDiffuser

    method SetDiffuser

    */
    inline void SetDiffuser(int hDevice, int channel, int index);

    /*
    Method SetExtTrigMode

    method SetExtTrigMode

    */
    inline void SetExtTrigMode(int hDevice, int index);

    /*
    Method SetExtTrigOnOff

    method SetExtTrigOnOff

    */
    inline void SetExtTrigOnOff(int hDevice, int channel, int index);

    /*
    Method SetExtTrigWindowTime

    method SetExtTrigWindowTime

    */
    inline void SetExtTrigWindowTime(int hDevice, int extTrigWindowTime);

    /*
    Method SetFilter

    method SetFilter

    */
    inline void SetFilter(int hDevice, int channel, int index);

    /*
    Method SetMeasurementMode

    method SetMeasurementMode

    */
    inline void SetMeasurementMode(int hDevice, int channel, int index);

    /*
    Method SetPulseLength

    method SetPulseLength

    */
    inline void SetPulseLength(int hDevice, int channel, int index);

    /*
    Method SetRange

    method SetRange

    */
    inline void SetRange(int hDevice, int channel, int index);

    /*
    Method SetThreshold

    method SetThreshold

    */
    inline void SetThreshold(int hDevice, int channel, int index);

    /*
    Method SetWavelength

    method SetWavelength

    */
    inline void SetWavelength(int hDevice, int channel, int index);

    /*
    Method StartStream

    method StartStream

    */
    inline void StartStream(int hDevice, int channel);

    /*
    Method StopAllStreams

    method StopAllStreams

    */
    inline void StopAllStreams();

    /*
    Method StopStream

    method StopStream

    */
    inline void StopStream(int hDevice, int channel);

    /*
    Method Write

    method Write

    */
    inline void Write(int hDevice, const QString& command);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_OPHIRLMMEASUREMENTLIB_NOINLINES
inline void CoLMMeasurement::AddWavelength(int hDevice, int channel, int wavelength)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&wavelength};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void CoLMMeasurement::Close(int hDevice)
{
    void *_a[] = {0, (void*)&hDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void CoLMMeasurement::CloseAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void CoLMMeasurement::ConfigureStreamMode(int hDevice, int channel, int mode, int nValue)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&mode, (void*)&nValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void CoLMMeasurement::DeleteWavelength(int hDevice, int channel, int index)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void CoLMMeasurement::GetData(int hDevice, int channel, QVariant& arrayValue, QVariant& arrayTimestamp, QVariant& arrayStatus)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&arrayValue, (void*)&arrayTimestamp, (void*)&arrayStatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void CoLMMeasurement::GetDeviceInfo(int hDevice, QString& deviceName, QString& romVersion, QString& serialNumber)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&deviceName, (void*)&romVersion, (void*)&serialNumber};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void CoLMMeasurement::GetDiffuser(int hDevice, int channel, int& index, QVariant& options)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index, (void*)&options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void CoLMMeasurement::GetDriverVersion(QString& info)
{
    void *_a[] = {0, (void*)&info};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void CoLMMeasurement::GetErrorFromCode(int errorCode, QString& errorString)
{
    void *_a[] = {0, (void*)&errorCode, (void*)&errorString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void CoLMMeasurement::GetExtTrigModes(int hDevice, int& index, QVariant& options)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&index, (void*)&options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void CoLMMeasurement::GetExtTrigOnOff(int hDevice, int channel, int& index, QVariant& options)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index, (void*)&options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void CoLMMeasurement::GetExtTrigWindowTime(int hDevice, int& extTrigWindow)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&extTrigWindow};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void CoLMMeasurement::GetFilter(int hDevice, int channel, int& index, QVariant& options)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index, (void*)&options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void CoLMMeasurement::GetKnownWirelessDevices(QVariant& serialNumbers)
{
    void *_a[] = {0, (void*)&serialNumbers};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void CoLMMeasurement::GetMeasurementMode(int hDevice, int channel, int& index, QVariant& options)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index, (void*)&options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void CoLMMeasurement::GetPulseLengths(int hDevice, int channel, int& index, QVariant& options)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index, (void*)&options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void CoLMMeasurement::GetRanges(int hDevice, int channel, int& index, QVariant& options)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index, (void*)&options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void CoLMMeasurement::GetSensorInfo(int hDevice, int channel, QString& serialNumber, QString& headType, QString& headName)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&serialNumber, (void*)&headType, (void*)&headName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void CoLMMeasurement::GetThreshold(int hDevice, int channel, int& index, QVariant& options)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index, (void*)&options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void CoLMMeasurement::GetVersion(int& version)
{
    void *_a[] = {0, (void*)&version};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void CoLMMeasurement::GetWavelengths(int hDevice, int channel, int& index, QVariant& options)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index, (void*)&options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void CoLMMeasurement::GetWavelengthsExtra(int hDevice, int channel, bool& modifiable, int& minWavelength, int& maxWavelength)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&modifiable, (void*)&minWavelength, (void*)&maxWavelength};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void CoLMMeasurement::IsSensorExists(int hDevice, int channel, bool& exists)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&exists};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void CoLMMeasurement::ModifyWavelength(int hDevice, int channel, int index, int wavelength)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index, (void*)&wavelength};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void CoLMMeasurement::OpenUSBDevice(const QString& serialNumber, int& hDevice)
{
    void *_a[] = {0, (void*)&serialNumber, (void*)&hDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void CoLMMeasurement::OpenWirelessDevice(const QString& serialNumber, int& hDevice)
{
    void *_a[] = {0, (void*)&serialNumber, (void*)&hDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void CoLMMeasurement::Read(int hDevice, QString& reply)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&reply};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline void CoLMMeasurement::ResetAllDevices()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}

inline void CoLMMeasurement::ResetDevice(int hDevice)
{
    void *_a[] = {0, (void*)&hDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline void CoLMMeasurement::SaveSettings(int hDevice, int channel)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline void CoLMMeasurement::ScanUSB(QVariant& serialNumbers)
{
    void *_a[] = {0, (void*)&serialNumbers};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline void CoLMMeasurement::ScanWireless(QVariant& serialNumbers)
{
    void *_a[] = {0, (void*)&serialNumbers};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void CoLMMeasurement::SetDiffuser(int hDevice, int channel, int index)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void CoLMMeasurement::SetExtTrigMode(int hDevice, int index)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void CoLMMeasurement::SetExtTrigOnOff(int hDevice, int channel, int index)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline void CoLMMeasurement::SetExtTrigWindowTime(int hDevice, int extTrigWindowTime)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&extTrigWindowTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline void CoLMMeasurement::SetFilter(int hDevice, int channel, int index)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline void CoLMMeasurement::SetMeasurementMode(int hDevice, int channel, int index)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void CoLMMeasurement::SetPulseLength(int hDevice, int channel, int index)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline void CoLMMeasurement::SetRange(int hDevice, int channel, int index)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline void CoLMMeasurement::SetThreshold(int hDevice, int channel, int index)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void CoLMMeasurement::SetWavelength(int hDevice, int channel, int index)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline void CoLMMeasurement::StartStream(int hDevice, int channel)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
}

inline void CoLMMeasurement::StopAllStreams()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void CoLMMeasurement::StopStream(int hDevice, int channel)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline void CoLMMeasurement::Write(int hDevice, const QString& command)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&command};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}


inline void ICoLMMeasurement::AddWavelength(int hDevice, int channel, int wavelength)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&wavelength};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void ICoLMMeasurement::Close(int hDevice)
{
    void *_a[] = {0, (void*)&hDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void ICoLMMeasurement::CloseAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void ICoLMMeasurement::ConfigureStreamMode(int hDevice, int channel, int mode, int nValue)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&mode, (void*)&nValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void ICoLMMeasurement::DeleteWavelength(int hDevice, int channel, int index)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void ICoLMMeasurement::GetData(int hDevice, int channel, QVariant& arrayValue, QVariant& arrayTimestamp, QVariant& arrayStatus)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&arrayValue, (void*)&arrayTimestamp, (void*)&arrayStatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void ICoLMMeasurement::GetDeviceInfo(int hDevice, QString& deviceName, QString& romVersion, QString& serialNumber)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&deviceName, (void*)&romVersion, (void*)&serialNumber};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void ICoLMMeasurement::GetDiffuser(int hDevice, int channel, int& index, QVariant& options)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index, (void*)&options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void ICoLMMeasurement::GetDriverVersion(QString& info)
{
    void *_a[] = {0, (void*)&info};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void ICoLMMeasurement::GetErrorFromCode(int errorCode, QString& errorString)
{
    void *_a[] = {0, (void*)&errorCode, (void*)&errorString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void ICoLMMeasurement::GetExtTrigModes(int hDevice, int& index, QVariant& options)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&index, (void*)&options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void ICoLMMeasurement::GetExtTrigOnOff(int hDevice, int channel, int& index, QVariant& options)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index, (void*)&options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void ICoLMMeasurement::GetExtTrigWindowTime(int hDevice, int& extTrigWindow)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&extTrigWindow};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void ICoLMMeasurement::GetFilter(int hDevice, int channel, int& index, QVariant& options)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index, (void*)&options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void ICoLMMeasurement::GetKnownWirelessDevices(QVariant& serialNumbers)
{
    void *_a[] = {0, (void*)&serialNumbers};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void ICoLMMeasurement::GetMeasurementMode(int hDevice, int channel, int& index, QVariant& options)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index, (void*)&options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void ICoLMMeasurement::GetPulseLengths(int hDevice, int channel, int& index, QVariant& options)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index, (void*)&options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void ICoLMMeasurement::GetRanges(int hDevice, int channel, int& index, QVariant& options)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index, (void*)&options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void ICoLMMeasurement::GetSensorInfo(int hDevice, int channel, QString& serialNumber, QString& headType, QString& headName)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&serialNumber, (void*)&headType, (void*)&headName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void ICoLMMeasurement::GetThreshold(int hDevice, int channel, int& index, QVariant& options)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index, (void*)&options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void ICoLMMeasurement::GetVersion(int& version)
{
    void *_a[] = {0, (void*)&version};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void ICoLMMeasurement::GetWavelengths(int hDevice, int channel, int& index, QVariant& options)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index, (void*)&options};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void ICoLMMeasurement::GetWavelengthsExtra(int hDevice, int channel, bool& modifiable, int& minWavelength, int& maxWavelength)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&modifiable, (void*)&minWavelength, (void*)&maxWavelength};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void ICoLMMeasurement::IsSensorExists(int hDevice, int channel, bool& exists)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&exists};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void ICoLMMeasurement::ModifyWavelength(int hDevice, int channel, int index, int wavelength)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index, (void*)&wavelength};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void ICoLMMeasurement::OpenUSBDevice(const QString& serialNumber, int& hDevice)
{
    void *_a[] = {0, (void*)&serialNumber, (void*)&hDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void ICoLMMeasurement::OpenWirelessDevice(const QString& serialNumber, int& hDevice)
{
    void *_a[] = {0, (void*)&serialNumber, (void*)&hDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void ICoLMMeasurement::Read(int hDevice, QString& reply)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&reply};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void ICoLMMeasurement::ResetAllDevices()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void ICoLMMeasurement::ResetDevice(int hDevice)
{
    void *_a[] = {0, (void*)&hDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline void ICoLMMeasurement::SaveSettings(int hDevice, int channel)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}

inline void ICoLMMeasurement::ScanUSB(QVariant& serialNumbers)
{
    void *_a[] = {0, (void*)&serialNumbers};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline void ICoLMMeasurement::ScanWireless(QVariant& serialNumbers)
{
    void *_a[] = {0, (void*)&serialNumbers};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline void ICoLMMeasurement::SetDiffuser(int hDevice, int channel, int index)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline void ICoLMMeasurement::SetExtTrigMode(int hDevice, int index)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void ICoLMMeasurement::SetExtTrigOnOff(int hDevice, int channel, int index)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void ICoLMMeasurement::SetExtTrigWindowTime(int hDevice, int extTrigWindowTime)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&extTrigWindowTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void ICoLMMeasurement::SetFilter(int hDevice, int channel, int index)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline void ICoLMMeasurement::SetMeasurementMode(int hDevice, int channel, int index)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline void ICoLMMeasurement::SetPulseLength(int hDevice, int channel, int index)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline void ICoLMMeasurement::SetRange(int hDevice, int channel, int index)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void ICoLMMeasurement::SetThreshold(int hDevice, int channel, int index)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline void ICoLMMeasurement::SetWavelength(int hDevice, int channel, int index)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline void ICoLMMeasurement::StartStream(int hDevice, int channel)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void ICoLMMeasurement::StopAllStreams()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline void ICoLMMeasurement::StopStream(int hDevice, int channel)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&channel};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
}

inline void ICoLMMeasurement::Write(int hDevice, const QString& command)
{
    void *_a[] = {0, (void*)&hDevice, (void*)&command};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}



#endif

}

QT_BEGIN_NAMESPACE

namespace QtMetaTypePrivate {
template<>
struct QMetaTypeFunctionHelper<OphirLMMeasurementLib::CoLMMeasurement, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<OphirLMMeasurementLib::CoLMMeasurement*>(t)->OphirLMMeasurementLib::CoLMMeasurement::~CoLMMeasurement();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) OphirLMMeasurementLib::CoLMMeasurement;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const OphirLMMeasurementLib::CoLMMeasurement*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<OphirLMMeasurementLib::CoLMMeasurement*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<OphirLMMeasurementLib::ICoLMMeasurement, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<OphirLMMeasurementLib::ICoLMMeasurement*>(t)->OphirLMMeasurementLib::ICoLMMeasurement::~ICoLMMeasurement();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) OphirLMMeasurementLib::ICoLMMeasurement;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const OphirLMMeasurementLib::ICoLMMeasurement*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<OphirLMMeasurementLib::ICoLMMeasurement*>(t); }
#endif // QT_NO_DATASTREAM
};

} // namespace QtMetaTypePrivate
QT_END_NAMESPACE

#endif

