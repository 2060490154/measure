/****************************************************************************
**
** Namespace ACTIVEDSOLib generated by dumpcpp v5.6.3 using
** dumpcpp.exe {450A9894-D9C9-11D1-9966-0000F840FC5E}
** from the type library C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.ocx
**
****************************************************************************/

#ifndef QAX_DUMPCPP_ACTIVEDSOLIB_H
#define QAX_DUMPCPP_ACTIVEDSOLIB_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef ACTIVEDSOLIB_EXPORT
#define ACTIVEDSOLIB_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace

namespace ACTIVEDSOLib {


class ACTIVEDSOLIB_EXPORT _DActiveDSO : public QAxObject
{
public:
    _DActiveDSO(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BinTransferSupport

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool BinTransferSupport() const; //Returns the value of BinTransferSupport
    inline void SetBinTransferSupport(bool value); //Sets the value of the BinTransferSupport property

    /*
    Property BytesRead

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline int BytesRead() const; //Returns the value of BytesRead
    inline void SetBytesRead(int value); //Sets the value of the BytesRead property

    /*
    Property ConnectionType

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QString ConnectionType() const; //Returns the value of ConnectionType
    inline void SetConnectionType(const QString& value); //Sets the value of the ConnectionType property

    /*
    Property DeviceModel

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QString DeviceModel() const; //Returns the value of DeviceModel
    inline void SetDeviceModel(const QString& value); //Sets the value of the DeviceModel property

    /*
    Property ErrorFlag

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool ErrorFlag() const; //Returns the value of ErrorFlag
    inline void SetErrorFlag(bool value); //Sets the value of the ErrorFlag property

    /*
    Property ErrorString

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QString ErrorString() const; //Returns the value of ErrorString
    inline void SetErrorString(const QString& value); //Sets the value of the ErrorString property

    /*
    Property NumChannels

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline int NumChannels() const; //Returns the value of NumChannels
    inline void SetNumChannels(int value); //Sets the value of the NumChannels property

    /*
    Property ScreenType

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QString ScreenType() const; //Returns the value of ScreenType
    inline void SetScreenType(const QString& value); //Sets the value of the ScreenType property

    /*
    Property SerialNumber

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QString SerialNumber() const; //Returns the value of SerialNumber
    inline void SetSerialNumber(const QString& value); //Sets the value of the SerialNumber property

    /*
    Method AboutBox

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline void AboutBox();

    /*
    Method DeviceClear

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool DeviceClear(bool reboot);

    /*
    Method Disconnect

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool Disconnect();

    /*
    Method GetByteWaveform

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QVariant GetByteWaveform(const QString& traceName, int maxPoints, int whichDataArray);

    /*
    Method GetCommaDelimitedString

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QString GetCommaDelimitedString(const QString& inputString, int index);

    /*
    Method GetIntegerWaveform

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QVariant GetIntegerWaveform(const QString& traceName, int maxPoints, int whichDataArray);

    /*
    Method GetNativeWaveform

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QVariant GetNativeWaveform(const QString& traceName, int maxBytes, bool transferAsWords, const QString& blockName);

    /*
    Method GetPanel

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QString GetPanel();

    /*
    Method GetParameterValue

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline double GetParameterValue(const QString& sourceTrace, const QString& parameterName, QString& returnedUnits, QString& returnedState);

    /*
    Method GetScaledWaveform

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QVariant GetScaledWaveform(const QString& traceName, int maxPoints, int whichDataArray);

    /*
    Method GetScaledWaveformWithTimes

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QVariant GetScaledWaveformWithTimes(const QString& traceName, int maxPoints, int whichDataArray);

    /*
    Method MakeConnection

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool MakeConnection(const QString& address);

    /*
    Method ReadBinary

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QVariant ReadBinary(int maxBytes);

    /*
    Method ReadString

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QString ReadString(int maxLength);

    /*
    Method RefreshImage

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool RefreshImage();

    /*
    Method SerialPoll

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool SerialPoll(int& pollValue);

    /*
    Method SetNativeWaveform

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool SetNativeWaveform(const QString& traceName, const QVariant& srcBuffer);

    /*
    Method SetPanel

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool SetPanel(const QString& buffer);

    /*
    Method SetRemoteLocal

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool SetRemoteLocal(int mode);

    /*
    Method SetTimeout

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool SetTimeout(double time);

    /*
    Method SetupWaveformTransfer

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool SetupWaveformTransfer(int firstPoint, int sparsing, int segmentNumber);

    /*
    Method StoreHardcopyToFile

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool StoreHardcopyToFile(const QString& format, const QString& auxFormat, const QString& fileName);

    /*
    Method TransferFileToDso

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool TransferFileToDso(const QString& remoteDevice, const QString& remoteFileName, const QString& localFileName);

    /*
    Method TransferFileToPc

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool TransferFileToPc(const QString& remoteDevice, const QString& remoteFileName, const QString& localFileName);

    /*
    Method WaitForOPC

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool WaitForOPC();

    /*
    Method WaitForSRQ

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool WaitForSRQ(double timeoutTime);

    /*
    Method WriteBinary

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool WriteBinary(const QVariant& buffer, int buf_len, bool EOI_state);

    /*
    Method WriteGPIBCommand

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool WriteGPIBCommand(const QVariant& cmd_buf, int buf_len);

    /*
    Method WriteString

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool WriteString(const QString& string, bool EOI_state);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// skipping event interface _DActiveDSOEvents

// Actual coclasses
class ACTIVEDSOLIB_EXPORT ActiveDSO : public QAxWidget
{
public:
    ActiveDSO(QWidget *parent = 0, Qt::WindowFlags f = 0)
    : QAxWidget(parent, f)
    {
        setControl("{450a9897-d9c9-11d1-9966-0000f840fc5e}");
    }

    /*
    Property BinTransferSupport

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool BinTransferSupport() const; //Returns the value of BinTransferSupport
    inline void SetBinTransferSupport(bool value); //Sets the value of the BinTransferSupport property

    /*
    Property BytesRead

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline int BytesRead() const; //Returns the value of BytesRead
    inline void SetBytesRead(int value); //Sets the value of the BytesRead property

    /*
    Property ConnectionType

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QString ConnectionType() const; //Returns the value of ConnectionType
    inline void SetConnectionType(const QString& value); //Sets the value of the ConnectionType property

    /*
    Property DeviceModel

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QString DeviceModel() const; //Returns the value of DeviceModel
    inline void SetDeviceModel(const QString& value); //Sets the value of the DeviceModel property

    /*
    Property ErrorFlag

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool ErrorFlag() const; //Returns the value of ErrorFlag
    inline void SetErrorFlag(bool value); //Sets the value of the ErrorFlag property

    /*
    Property ErrorString

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QString ErrorString() const; //Returns the value of ErrorString
    inline void SetErrorString(const QString& value); //Sets the value of the ErrorString property

    /*
    Property NumChannels

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline int NumChannels() const; //Returns the value of NumChannels
    inline void SetNumChannels(int value); //Sets the value of the NumChannels property

    /*
    Property ScreenType

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QString ScreenType() const; //Returns the value of ScreenType
    inline void SetScreenType(const QString& value); //Sets the value of the ScreenType property

    /*
    Property SerialNumber

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QString SerialNumber() const; //Returns the value of SerialNumber
    inline void SetSerialNumber(const QString& value); //Sets the value of the SerialNumber property

    /*
    Method AboutBox

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline void AboutBox();

    /*
    Method DeviceClear

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool DeviceClear(bool reboot);

    /*
    Method Disconnect

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool Disconnect();

    /*
    Method GetByteWaveform

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QVariant GetByteWaveform(const QString& traceName, int maxPoints, int whichDataArray);

    /*
    Method GetCommaDelimitedString

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QString GetCommaDelimitedString(const QString& inputString, int index);

    /*
    Method GetIntegerWaveform

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QVariant GetIntegerWaveform(const QString& traceName, int maxPoints, int whichDataArray);

    /*
    Method GetNativeWaveform

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QVariant GetNativeWaveform(const QString& traceName, int maxBytes, bool transferAsWords, const QString& blockName);

    /*
    Method GetPanel

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QString GetPanel();

    /*
    Method GetParameterValue

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline double GetParameterValue(const QString& sourceTrace, const QString& parameterName, QString& returnedUnits, QString& returnedState);

    /*
    Method GetScaledWaveform

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QVariant GetScaledWaveform(const QString& traceName, int maxPoints, int whichDataArray);

    /*
    Method GetScaledWaveformWithTimes

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QVariant GetScaledWaveformWithTimes(const QString& traceName, int maxPoints, int whichDataArray);

    /*
    Method MakeConnection

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool MakeConnection(const QString& address);

    /*
    Method ReadBinary

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QVariant ReadBinary(int maxBytes);

    /*
    Method ReadString

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline QString ReadString(int maxLength);

    /*
    Method RefreshImage

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool RefreshImage();

    /*
    Method SerialPoll

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool SerialPoll(int& pollValue);

    /*
    Method SetNativeWaveform

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool SetNativeWaveform(const QString& traceName, const QVariant& srcBuffer);

    /*
    Method SetPanel

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool SetPanel(const QString& buffer);

    /*
    Method SetRemoteLocal

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool SetRemoteLocal(int mode);

    /*
    Method SetTimeout

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool SetTimeout(double time);

    /*
    Method SetupWaveformTransfer

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool SetupWaveformTransfer(int firstPoint, int sparsing, int segmentNumber);

    /*
    Method StoreHardcopyToFile

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool StoreHardcopyToFile(const QString& format, const QString& auxFormat, const QString& fileName);

    /*
    Method TransferFileToDso

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool TransferFileToDso(const QString& remoteDevice, const QString& remoteFileName, const QString& localFileName);

    /*
    Method TransferFileToPc

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool TransferFileToPc(const QString& remoteDevice, const QString& remoteFileName, const QString& localFileName);

    /*
    Method WaitForOPC

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool WaitForOPC();

    /*
    Method WaitForSRQ

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool WaitForSRQ(double timeoutTime);

    /*
    Method WriteBinary

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool WriteBinary(const QVariant& buffer, int buf_len, bool EOI_state);

    /*
    Method WriteGPIBCommand

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool WriteGPIBCommand(const QVariant& cmd_buf, int buf_len);

    /*
    Method WriteString

    For more information, see help context 0 in C:\Program Files (x86)\LeCroy\ActiveDSO\ActiveDSO.hlp.
    */
    inline bool WriteString(const QString& string, bool EOI_state);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_ACTIVEDSOLIB_NOINLINES
inline bool _DActiveDSO::BinTransferSupport() const
{
    QVariant qax_result = property("BinTransferSupport");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DActiveDSO::SetBinTransferSupport(bool value){ setProperty("BinTransferSupport", QVariant(value)); }

inline int _DActiveDSO::BytesRead() const
{
    QVariant qax_result = property("BytesRead");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DActiveDSO::SetBytesRead(int value){ setProperty("BytesRead", QVariant(value)); }

inline QString _DActiveDSO::ConnectionType() const
{
    QVariant qax_result = property("ConnectionType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DActiveDSO::SetConnectionType(const QString& value){ setProperty("ConnectionType", QVariant(value)); }

inline QString _DActiveDSO::DeviceModel() const
{
    QVariant qax_result = property("DeviceModel");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DActiveDSO::SetDeviceModel(const QString& value){ setProperty("DeviceModel", QVariant(value)); }

inline bool _DActiveDSO::ErrorFlag() const
{
    QVariant qax_result = property("ErrorFlag");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DActiveDSO::SetErrorFlag(bool value){ setProperty("ErrorFlag", QVariant(value)); }

inline QString _DActiveDSO::ErrorString() const
{
    QVariant qax_result = property("ErrorString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DActiveDSO::SetErrorString(const QString& value){ setProperty("ErrorString", QVariant(value)); }

inline int _DActiveDSO::NumChannels() const
{
    QVariant qax_result = property("NumChannels");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DActiveDSO::SetNumChannels(int value){ setProperty("NumChannels", QVariant(value)); }

inline QString _DActiveDSO::ScreenType() const
{
    QVariant qax_result = property("ScreenType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DActiveDSO::SetScreenType(const QString& value){ setProperty("ScreenType", QVariant(value)); }

inline QString _DActiveDSO::SerialNumber() const
{
    QVariant qax_result = property("SerialNumber");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DActiveDSO::SetSerialNumber(const QString& value){ setProperty("SerialNumber", QVariant(value)); }

inline void _DActiveDSO::AboutBox()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline bool _DActiveDSO::DeviceClear(bool reboot)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&reboot};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline bool _DActiveDSO::Disconnect()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline QVariant _DActiveDSO::GetByteWaveform(const QString& traceName, int maxPoints, int whichDataArray)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&traceName, (void*)&maxPoints, (void*)&whichDataArray};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline QString _DActiveDSO::GetCommaDelimitedString(const QString& inputString, int index)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&inputString, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QVariant _DActiveDSO::GetIntegerWaveform(const QString& traceName, int maxPoints, int whichDataArray)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&traceName, (void*)&maxPoints, (void*)&whichDataArray};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline QVariant _DActiveDSO::GetNativeWaveform(const QString& traceName, int maxBytes, bool transferAsWords, const QString& blockName)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&traceName, (void*)&maxBytes, (void*)&transferAsWords, (void*)&blockName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline QString _DActiveDSO::GetPanel()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline double _DActiveDSO::GetParameterValue(const QString& sourceTrace, const QString& parameterName, QString& returnedUnits, QString& returnedState)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sourceTrace, (void*)&parameterName, (void*)&returnedUnits, (void*)&returnedState};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline QVariant _DActiveDSO::GetScaledWaveform(const QString& traceName, int maxPoints, int whichDataArray)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&traceName, (void*)&maxPoints, (void*)&whichDataArray};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline QVariant _DActiveDSO::GetScaledWaveformWithTimes(const QString& traceName, int maxPoints, int whichDataArray)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&traceName, (void*)&maxPoints, (void*)&whichDataArray};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool _DActiveDSO::MakeConnection(const QString& address)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&address};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline QVariant _DActiveDSO::ReadBinary(int maxBytes)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&maxBytes};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline QString _DActiveDSO::ReadString(int maxLength)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&maxLength};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool _DActiveDSO::RefreshImage()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline bool _DActiveDSO::SerialPoll(int& pollValue)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pollValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool _DActiveDSO::SetNativeWaveform(const QString& traceName, const QVariant& srcBuffer)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&traceName, (void*)&srcBuffer};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline bool _DActiveDSO::SetPanel(const QString& buffer)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&buffer};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline bool _DActiveDSO::SetRemoteLocal(int mode)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&mode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline bool _DActiveDSO::SetTimeout(double time)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&time};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline bool _DActiveDSO::SetupWaveformTransfer(int firstPoint, int sparsing, int segmentNumber)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&firstPoint, (void*)&sparsing, (void*)&segmentNumber};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline bool _DActiveDSO::StoreHardcopyToFile(const QString& format, const QString& auxFormat, const QString& fileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&format, (void*)&auxFormat, (void*)&fileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool _DActiveDSO::TransferFileToDso(const QString& remoteDevice, const QString& remoteFileName, const QString& localFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&remoteDevice, (void*)&remoteFileName, (void*)&localFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline bool _DActiveDSO::TransferFileToPc(const QString& remoteDevice, const QString& remoteFileName, const QString& localFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&remoteDevice, (void*)&remoteFileName, (void*)&localFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline bool _DActiveDSO::WaitForOPC()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline bool _DActiveDSO::WaitForSRQ(double timeoutTime)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&timeoutTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline bool _DActiveDSO::WriteBinary(const QVariant& buffer, int buf_len, bool EOI_state)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&buffer, (void*)&buf_len, (void*)&EOI_state};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline bool _DActiveDSO::WriteGPIBCommand(const QVariant& cmd_buf, int buf_len)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&cmd_buf, (void*)&buf_len};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline bool _DActiveDSO::WriteString(const QString& string, bool EOI_state)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&string, (void*)&EOI_state};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}


inline bool ActiveDSO::BinTransferSupport() const
{
    QVariant qax_result = property("BinTransferSupport");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ActiveDSO::SetBinTransferSupport(bool value){ setProperty("BinTransferSupport", QVariant(value)); }

inline int ActiveDSO::BytesRead() const
{
    QVariant qax_result = property("BytesRead");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ActiveDSO::SetBytesRead(int value){ setProperty("BytesRead", QVariant(value)); }

inline QString ActiveDSO::ConnectionType() const
{
    QVariant qax_result = property("ConnectionType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ActiveDSO::SetConnectionType(const QString& value){ setProperty("ConnectionType", QVariant(value)); }

inline QString ActiveDSO::DeviceModel() const
{
    QVariant qax_result = property("DeviceModel");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ActiveDSO::SetDeviceModel(const QString& value){ setProperty("DeviceModel", QVariant(value)); }

inline bool ActiveDSO::ErrorFlag() const
{
    QVariant qax_result = property("ErrorFlag");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ActiveDSO::SetErrorFlag(bool value){ setProperty("ErrorFlag", QVariant(value)); }

inline QString ActiveDSO::ErrorString() const
{
    QVariant qax_result = property("ErrorString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ActiveDSO::SetErrorString(const QString& value){ setProperty("ErrorString", QVariant(value)); }

inline int ActiveDSO::NumChannels() const
{
    QVariant qax_result = property("NumChannels");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ActiveDSO::SetNumChannels(int value){ setProperty("NumChannels", QVariant(value)); }

inline QString ActiveDSO::ScreenType() const
{
    QVariant qax_result = property("ScreenType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ActiveDSO::SetScreenType(const QString& value){ setProperty("ScreenType", QVariant(value)); }

inline QString ActiveDSO::SerialNumber() const
{
    QVariant qax_result = property("SerialNumber");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ActiveDSO::SetSerialNumber(const QString& value){ setProperty("SerialNumber", QVariant(value)); }

inline void ActiveDSO::AboutBox()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline bool ActiveDSO::DeviceClear(bool reboot)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&reboot};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline bool ActiveDSO::Disconnect()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline QVariant ActiveDSO::GetByteWaveform(const QString& traceName, int maxPoints, int whichDataArray)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&traceName, (void*)&maxPoints, (void*)&whichDataArray};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline QString ActiveDSO::GetCommaDelimitedString(const QString& inputString, int index)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&inputString, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline QVariant ActiveDSO::GetIntegerWaveform(const QString& traceName, int maxPoints, int whichDataArray)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&traceName, (void*)&maxPoints, (void*)&whichDataArray};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline QVariant ActiveDSO::GetNativeWaveform(const QString& traceName, int maxBytes, bool transferAsWords, const QString& blockName)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&traceName, (void*)&maxBytes, (void*)&transferAsWords, (void*)&blockName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline QString ActiveDSO::GetPanel()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline double ActiveDSO::GetParameterValue(const QString& sourceTrace, const QString& parameterName, QString& returnedUnits, QString& returnedState)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sourceTrace, (void*)&parameterName, (void*)&returnedUnits, (void*)&returnedState};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline QVariant ActiveDSO::GetScaledWaveform(const QString& traceName, int maxPoints, int whichDataArray)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&traceName, (void*)&maxPoints, (void*)&whichDataArray};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline QVariant ActiveDSO::GetScaledWaveformWithTimes(const QString& traceName, int maxPoints, int whichDataArray)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&traceName, (void*)&maxPoints, (void*)&whichDataArray};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline bool ActiveDSO::MakeConnection(const QString& address)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&address};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline QVariant ActiveDSO::ReadBinary(int maxBytes)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&maxBytes};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline QString ActiveDSO::ReadString(int maxLength)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&maxLength};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline bool ActiveDSO::RefreshImage()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline bool ActiveDSO::SerialPoll(int& pollValue)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pollValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline bool ActiveDSO::SetNativeWaveform(const QString& traceName, const QVariant& srcBuffer)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&traceName, (void*)&srcBuffer};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
    return qax_result;
}

inline bool ActiveDSO::SetPanel(const QString& buffer)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&buffer};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline bool ActiveDSO::SetRemoteLocal(int mode)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&mode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline bool ActiveDSO::SetTimeout(double time)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&time};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
    return qax_result;
}

inline bool ActiveDSO::SetupWaveformTransfer(int firstPoint, int sparsing, int segmentNumber)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&firstPoint, (void*)&sparsing, (void*)&segmentNumber};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}

inline bool ActiveDSO::StoreHardcopyToFile(const QString& format, const QString& auxFormat, const QString& fileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&format, (void*)&auxFormat, (void*)&fileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
    return qax_result;
}

inline bool ActiveDSO::TransferFileToDso(const QString& remoteDevice, const QString& remoteFileName, const QString& localFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&remoteDevice, (void*)&remoteFileName, (void*)&localFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
    return qax_result;
}

inline bool ActiveDSO::TransferFileToPc(const QString& remoteDevice, const QString& remoteFileName, const QString& localFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&remoteDevice, (void*)&remoteFileName, (void*)&localFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
    return qax_result;
}

inline bool ActiveDSO::WaitForOPC()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
    return qax_result;
}

inline bool ActiveDSO::WaitForSRQ(double timeoutTime)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&timeoutTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline bool ActiveDSO::WriteBinary(const QVariant& buffer, int buf_len, bool EOI_state)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&buffer, (void*)&buf_len, (void*)&EOI_state};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline bool ActiveDSO::WriteGPIBCommand(const QVariant& cmd_buf, int buf_len)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&cmd_buf, (void*)&buf_len};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
    return qax_result;
}

inline bool ActiveDSO::WriteString(const QString& string, bool EOI_state)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&string, (void*)&EOI_state};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
    return qax_result;
}



#endif

}

QT_BEGIN_NAMESPACE

namespace QtMetaTypePrivate {
template<>
struct QMetaTypeFunctionHelper<ACTIVEDSOLib::_DActiveDSO, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<ACTIVEDSOLib::_DActiveDSO*>(t)->ACTIVEDSOLib::_DActiveDSO::~_DActiveDSO();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) ACTIVEDSOLib::_DActiveDSO;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const ACTIVEDSOLib::_DActiveDSO*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<ACTIVEDSOLib::_DActiveDSO*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<ACTIVEDSOLib::ActiveDSO, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<ACTIVEDSOLib::ActiveDSO*>(t)->ACTIVEDSOLib::ActiveDSO::~ActiveDSO();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) ACTIVEDSOLib::ActiveDSO;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const ACTIVEDSOLib::ActiveDSO*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<ACTIVEDSOLib::ActiveDSO*>(t); }
#endif // QT_NO_DATASTREAM
};

} // namespace QtMetaTypePrivate
QT_END_NAMESPACE

#endif

